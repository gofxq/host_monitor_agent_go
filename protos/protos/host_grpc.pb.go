// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: protos/host.proto

package pb_model

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HostService_ReportHostInfo_FullMethodName       = "/protos.HostService/ReportHostInfo"
	HostService_ReportHostInfoStream_FullMethodName = "/protos.HostService/ReportHostInfoStream"
)

// HostServiceClient is the client API for HostService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HostServiceClient interface {
	ReportHostInfo(ctx context.Context, in *HostInfo, opts ...grpc.CallOption) (*Receipt, error)
	ReportHostInfoStream(ctx context.Context, opts ...grpc.CallOption) (HostService_ReportHostInfoStreamClient, error)
}

type hostServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHostServiceClient(cc grpc.ClientConnInterface) HostServiceClient {
	return &hostServiceClient{cc}
}

func (c *hostServiceClient) ReportHostInfo(ctx context.Context, in *HostInfo, opts ...grpc.CallOption) (*Receipt, error) {
	out := new(Receipt)
	err := c.cc.Invoke(ctx, HostService_ReportHostInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) ReportHostInfoStream(ctx context.Context, opts ...grpc.CallOption) (HostService_ReportHostInfoStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &HostService_ServiceDesc.Streams[0], HostService_ReportHostInfoStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &hostServiceReportHostInfoStreamClient{stream}
	return x, nil
}

type HostService_ReportHostInfoStreamClient interface {
	Send(*HostInfo) error
	CloseAndRecv() (*Receipt, error)
	grpc.ClientStream
}

type hostServiceReportHostInfoStreamClient struct {
	grpc.ClientStream
}

func (x *hostServiceReportHostInfoStreamClient) Send(m *HostInfo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *hostServiceReportHostInfoStreamClient) CloseAndRecv() (*Receipt, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Receipt)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HostServiceServer is the server API for HostService service.
// All implementations must embed UnimplementedHostServiceServer
// for forward compatibility
type HostServiceServer interface {
	ReportHostInfo(context.Context, *HostInfo) (*Receipt, error)
	ReportHostInfoStream(HostService_ReportHostInfoStreamServer) error
	mustEmbedUnimplementedHostServiceServer()
}

// UnimplementedHostServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHostServiceServer struct {
}

func (UnimplementedHostServiceServer) ReportHostInfo(context.Context, *HostInfo) (*Receipt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportHostInfo not implemented")
}
func (UnimplementedHostServiceServer) ReportHostInfoStream(HostService_ReportHostInfoStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ReportHostInfoStream not implemented")
}
func (UnimplementedHostServiceServer) mustEmbedUnimplementedHostServiceServer() {}

// UnsafeHostServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HostServiceServer will
// result in compilation errors.
type UnsafeHostServiceServer interface {
	mustEmbedUnimplementedHostServiceServer()
}

func RegisterHostServiceServer(s grpc.ServiceRegistrar, srv HostServiceServer) {
	s.RegisterService(&HostService_ServiceDesc, srv)
}

func _HostService_ReportHostInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).ReportHostInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostService_ReportHostInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).ReportHostInfo(ctx, req.(*HostInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_ReportHostInfoStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HostServiceServer).ReportHostInfoStream(&hostServiceReportHostInfoStreamServer{stream})
}

type HostService_ReportHostInfoStreamServer interface {
	SendAndClose(*Receipt) error
	Recv() (*HostInfo, error)
	grpc.ServerStream
}

type hostServiceReportHostInfoStreamServer struct {
	grpc.ServerStream
}

func (x *hostServiceReportHostInfoStreamServer) SendAndClose(m *Receipt) error {
	return x.ServerStream.SendMsg(m)
}

func (x *hostServiceReportHostInfoStreamServer) Recv() (*HostInfo, error) {
	m := new(HostInfo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HostService_ServiceDesc is the grpc.ServiceDesc for HostService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HostService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.HostService",
	HandlerType: (*HostServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportHostInfo",
			Handler:    _HostService_ReportHostInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReportHostInfoStream",
			Handler:       _HostService_ReportHostInfoStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "protos/host.proto",
}
