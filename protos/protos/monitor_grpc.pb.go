// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: protos/monitor.proto

package pb_model

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MonitorService_ReportMonitor_FullMethodName       = "/protos.MonitorService/ReportMonitor"
	MonitorService_ReportMonitorStream_FullMethodName = "/protos.MonitorService/ReportMonitorStream"
)

// MonitorServiceClient is the client API for MonitorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MonitorServiceClient interface {
	ReportMonitor(ctx context.Context, in *MonitorTick, opts ...grpc.CallOption) (*Receipt, error)
	ReportMonitorStream(ctx context.Context, opts ...grpc.CallOption) (MonitorService_ReportMonitorStreamClient, error)
}

type monitorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMonitorServiceClient(cc grpc.ClientConnInterface) MonitorServiceClient {
	return &monitorServiceClient{cc}
}

func (c *monitorServiceClient) ReportMonitor(ctx context.Context, in *MonitorTick, opts ...grpc.CallOption) (*Receipt, error) {
	out := new(Receipt)
	err := c.cc.Invoke(ctx, MonitorService_ReportMonitor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorServiceClient) ReportMonitorStream(ctx context.Context, opts ...grpc.CallOption) (MonitorService_ReportMonitorStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &MonitorService_ServiceDesc.Streams[0], MonitorService_ReportMonitorStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &monitorServiceReportMonitorStreamClient{stream}
	return x, nil
}

type MonitorService_ReportMonitorStreamClient interface {
	Send(*MonitorTick) error
	CloseAndRecv() (*Receipt, error)
	grpc.ClientStream
}

type monitorServiceReportMonitorStreamClient struct {
	grpc.ClientStream
}

func (x *monitorServiceReportMonitorStreamClient) Send(m *MonitorTick) error {
	return x.ClientStream.SendMsg(m)
}

func (x *monitorServiceReportMonitorStreamClient) CloseAndRecv() (*Receipt, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Receipt)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MonitorServiceServer is the server API for MonitorService service.
// All implementations must embed UnimplementedMonitorServiceServer
// for forward compatibility
type MonitorServiceServer interface {
	ReportMonitor(context.Context, *MonitorTick) (*Receipt, error)
	ReportMonitorStream(MonitorService_ReportMonitorStreamServer) error
	mustEmbedUnimplementedMonitorServiceServer()
}

// UnimplementedMonitorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMonitorServiceServer struct {
}

func (UnimplementedMonitorServiceServer) ReportMonitor(context.Context, *MonitorTick) (*Receipt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportMonitor not implemented")
}
func (UnimplementedMonitorServiceServer) ReportMonitorStream(MonitorService_ReportMonitorStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ReportMonitorStream not implemented")
}
func (UnimplementedMonitorServiceServer) mustEmbedUnimplementedMonitorServiceServer() {}

// UnsafeMonitorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MonitorServiceServer will
// result in compilation errors.
type UnsafeMonitorServiceServer interface {
	mustEmbedUnimplementedMonitorServiceServer()
}

func RegisterMonitorServiceServer(s grpc.ServiceRegistrar, srv MonitorServiceServer) {
	s.RegisterService(&MonitorService_ServiceDesc, srv)
}

func _MonitorService_ReportMonitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MonitorTick)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitorServiceServer).ReportMonitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonitorService_ReportMonitor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitorServiceServer).ReportMonitor(ctx, req.(*MonitorTick))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitorService_ReportMonitorStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MonitorServiceServer).ReportMonitorStream(&monitorServiceReportMonitorStreamServer{stream})
}

type MonitorService_ReportMonitorStreamServer interface {
	SendAndClose(*Receipt) error
	Recv() (*MonitorTick, error)
	grpc.ServerStream
}

type monitorServiceReportMonitorStreamServer struct {
	grpc.ServerStream
}

func (x *monitorServiceReportMonitorStreamServer) SendAndClose(m *Receipt) error {
	return x.ServerStream.SendMsg(m)
}

func (x *monitorServiceReportMonitorStreamServer) Recv() (*MonitorTick, error) {
	m := new(MonitorTick)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MonitorService_ServiceDesc is the grpc.ServiceDesc for MonitorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MonitorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.MonitorService",
	HandlerType: (*MonitorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportMonitor",
			Handler:    _MonitorService_ReportMonitor_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReportMonitorStream",
			Handler:       _MonitorService_ReportMonitorStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "protos/monitor.proto",
}
